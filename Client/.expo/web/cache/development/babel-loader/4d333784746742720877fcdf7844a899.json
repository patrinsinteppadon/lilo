{"ast":null,"code":"var _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar connection = _ExecutionEnvironment2.default.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\nvar eventTypes = ['change'];\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    connection.addEventListener(type, handler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(type, handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (!connection) {\n      return;\n    }\n\n    connection.removeEventListener(type, handler);\n  },\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      window.addEventListener('online', handler.bind(null, true), false);\n      window.addEventListener('offline', handler.bind(null, false), false);\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(type, handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      window.removeEventListener('online', handler.bind(null, true), false);\n      window.removeEventListener('offline', handler.bind(null, false), false);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\nmodule.exports = NetInfo;","map":{"version":3,"sources":["/Users/paola/Documents/Capstone/lilo/node_modules/react-native-web-webrtc/node_modules/react-native-web/dist/apis/NetInfo/index.js"],"names":["_ExecutionEnvironment","require","_ExecutionEnvironment2","_interopRequireDefault","_invariant","_invariant2","obj","__esModule","default","connection","canUseDOM","window","navigator","mozConnection","webkitConnection","eventTypes","NetInfo","addEventListener","type","handler","indexOf","console","error","remove","removeEventListener","fetch","Promise","resolve","reject","err","isConnected","bind","onLine","module","exports"],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\nvar _ExecutionEnvironment=require('fbjs/lib/ExecutionEnvironment');var _ExecutionEnvironment2=_interopRequireDefault(_ExecutionEnvironment);\nvar _invariant=require('fbjs/lib/invariant');var _invariant2=_interopRequireDefault(_invariant);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**\n * Copyright (c) 2015-present, Nicolas Gallagher.\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * \n */var connection=_ExecutionEnvironment2.default.canUseDOM&&(window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection);\n\nvar eventTypes=['change'];\n\n/**\n * Navigator online: https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n * Network Connection API: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\nvar NetInfo={\naddEventListener:function addEventListener(type,handler){\n(0,_invariant2.default)(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);\nif(!connection){\nconsole.error('Network Connection API is not supported. Not listening for connection type changes.');\nreturn{\nremove:function remove(){}};\n\n}\n\nconnection.addEventListener(type,handler);\nreturn{\nremove:function remove(){return NetInfo.removeEventListener(type,handler);}};\n\n},\n\nremoveEventListener:function removeEventListener(type,handler){\n(0,_invariant2.default)(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);\nif(!connection){return;}\nconnection.removeEventListener(type,handler);\n},\n\nfetch:function fetch(){\nreturn new Promise(function(resolve,reject){\ntry{\nresolve(connection.type);\n}catch(err){\nresolve('unknown');\n}\n});\n},\n\nisConnected:{\naddEventListener:function addEventListener(type,handler){\n(0,_invariant2.default)(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);\nwindow.addEventListener('online',handler.bind(null,true),false);\nwindow.addEventListener('offline',handler.bind(null,false),false);\n\nreturn{\nremove:function remove(){return NetInfo.isConnected.removeEventListener(type,handler);}};\n\n},\n\nremoveEventListener:function removeEventListener(type,handler){\n(0,_invariant2.default)(eventTypes.indexOf(type)!==-1,'Trying to subscribe to unknown event: \"%s\"',type);\nwindow.removeEventListener('online',handler.bind(null,true),false);\nwindow.removeEventListener('offline',handler.bind(null,false),false);\n},\n\nfetch:function fetch(){\nreturn new Promise(function(resolve,reject){\ntry{\nresolve(window.navigator.onLine);\n}catch(err){\nresolve(true);\n}\n});\n}}};\n\n\n\nmodule.exports=NetInfo;"]},"metadata":{},"sourceType":"script"}