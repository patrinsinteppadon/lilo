{"ast":null,"code":"\"use strict\";\n\nvar TouchHistoryMath = require('react/lib/TouchHistoryMath');\n\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\nvar PanResponder = {\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    gestureState._accountsForMovesUpTo = 0;\n  },\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY);\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n  create: function create(config) {\n    var gestureState = {\n      stateID: Math.random()\n    };\n\n    PanResponder._initializeGestureState(gestureState);\n\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(e) {\n        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {\n        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {\n        if (e.nativeEvent.touches) {\n          if (e.nativeEvent.touches.length === 1) {\n            PanResponder._initializeGestureState(gestureState);\n          }\n        } else if (e.nativeEvent.originalEvent && e.nativeEvent.originalEvent.type === 'mousedown') {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {\n        var touchHistory = e.touchHistory;\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(e) {\n        gestureState.x0 = currentCentroidX(e.touchHistory);\n        gestureState.y0 = currentCentroidY(e.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        config.onPanResponderGrant && config.onPanResponderGrant(e, gestureState);\n        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();\n      },\n      onResponderReject: function onResponderReject(e) {\n        config.onPanResponderReject && config.onPanResponderReject(e, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(e) {\n        config.onPanResponderRelease && config.onPanResponderRelease(e, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        config.onPanResponderStart && config.onPanResponderStart(e, gestureState);\n      },\n      onResponderMove: function onResponderMove(e) {\n        var touchHistory = e.touchHistory;\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        config.onPanResponderMove && config.onPanResponderMove(e, gestureState);\n      },\n      onResponderEnd: function onResponderEnd(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        config.onPanResponderEnd && config.onPanResponderEnd(e, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(e) {\n        config.onPanResponderTerminate && config.onPanResponderTerminate(e, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(e) {\n        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers\n    };\n  }\n};\nmodule.exports = PanResponder;","map":{"version":3,"sources":["/Users/paola/Documents/Capstone/lilo/node_modules/react-native-web-webrtc/node_modules/react-native-web/dist/apis/PanResponder/index.js"],"names":["TouchHistoryMath","require","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","stateID","Math","random","panHandlers","onStartShouldSetResponder","e","onStartShouldSetPanResponder","undefined","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","length","originalEvent","type","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n */\n\n\"use strict\";\n\nvar TouchHistoryMath=require('react/lib/TouchHistoryMath');\n\nvar currentCentroidXOfTouchesChangedAfter=\nTouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter=\nTouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter=\nTouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter=\nTouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX=TouchHistoryMath.currentCentroidX;\nvar currentCentroidY=TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The guesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.{x,y}0 will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in UIExplorer](https://github.com/facebook/react-native/blob/master/Examples/UIExplorer/PanResponderExample.js)\n */\n\nvar PanResponder={\n\n/**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n_initializeGestureState:function _initializeGestureState(gestureState){\ngestureState.moveX=0;\ngestureState.moveY=0;\ngestureState.x0=0;\ngestureState.y0=0;\ngestureState.dx=0;\ngestureState.dy=0;\ngestureState.vx=0;\ngestureState.vy=0;\ngestureState.numberActiveTouches=0;\n// All `gestureState` accounts for timeStamps up until:\ngestureState._accountsForMovesUpTo=0;\n},\n\n/**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n_updateGestureStateOnMove:function _updateGestureStateOnMove(gestureState,touchHistory){\ngestureState.numberActiveTouches=touchHistory.numberActiveTouches;\ngestureState.moveX=currentCentroidXOfTouchesChangedAfter(\ntouchHistory,\ngestureState._accountsForMovesUpTo);\n\ngestureState.moveY=currentCentroidYOfTouchesChangedAfter(\ntouchHistory,\ngestureState._accountsForMovesUpTo);\n\nvar movedAfter=gestureState._accountsForMovesUpTo;\nvar prevX=previousCentroidXOfTouchesChangedAfter(touchHistory,movedAfter);\nvar x=currentCentroidXOfTouchesChangedAfter(touchHistory,movedAfter);\nvar prevY=previousCentroidYOfTouchesChangedAfter(touchHistory,movedAfter);\nvar y=currentCentroidYOfTouchesChangedAfter(touchHistory,movedAfter);\nvar nextDX=gestureState.dx+(x-prevX);\nvar nextDY=gestureState.dy+(y-prevY);\n\n// TODO: This must be filtered intelligently.\nvar dt=\ntouchHistory.mostRecentTimeStamp-gestureState._accountsForMovesUpTo;\ngestureState.vx=(nextDX-gestureState.dx)/dt;\ngestureState.vy=(nextDY-gestureState.dy)/dt;\n\ngestureState.dx=nextDX;\ngestureState.dy=nextDY;\ngestureState._accountsForMovesUpTo=touchHistory.mostRecentTimeStamp;\n},\n\n/**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\ncreate:function create(config){\nvar gestureState={\n// Useful for debugging\nstateID:Math.random()};\n\nPanResponder._initializeGestureState(gestureState);\nvar panHandlers={\nonStartShouldSetResponder:function onStartShouldSetResponder(e){\nreturn config.onStartShouldSetPanResponder===undefined?false:\nconfig.onStartShouldSetPanResponder(e,gestureState);\n},\nonMoveShouldSetResponder:function onMoveShouldSetResponder(e){\nreturn config.onMoveShouldSetPanResponder===undefined?false:\nconfig.onMoveShouldSetPanResponder(e,gestureState);\n},\nonStartShouldSetResponderCapture:function onStartShouldSetResponderCapture(e){\n// TODO: Actually, we should reinitialize the state any time\n// touches.length increases from 0 active to > 0 active.\nif(e.nativeEvent.touches){\nif(e.nativeEvent.touches.length===1){\nPanResponder._initializeGestureState(gestureState);\n}\n}else\nif(e.nativeEvent.originalEvent&&e.nativeEvent.originalEvent.type==='mousedown'){\nPanResponder._initializeGestureState(gestureState);\n}\ngestureState.numberActiveTouches=e.touchHistory.numberActiveTouches;\nreturn config.onStartShouldSetPanResponderCapture!==undefined?\nconfig.onStartShouldSetPanResponderCapture(e,gestureState):false;\n},\n\nonMoveShouldSetResponderCapture:function onMoveShouldSetResponderCapture(e){\nvar touchHistory=e.touchHistory;\n// Responder system incorrectly dispatches should* to current responder\n// Filter out any touch moves past the first one - we would have\n// already processed multi-touch geometry during the first event.\nif(gestureState._accountsForMovesUpTo===touchHistory.mostRecentTimeStamp){\nreturn false;\n}\nPanResponder._updateGestureStateOnMove(gestureState,touchHistory);\nreturn config.onMoveShouldSetPanResponderCapture?\nconfig.onMoveShouldSetPanResponderCapture(e,gestureState):false;\n},\n\nonResponderGrant:function onResponderGrant(e){\ngestureState.x0=currentCentroidX(e.touchHistory);\ngestureState.y0=currentCentroidY(e.touchHistory);\ngestureState.dx=0;\ngestureState.dy=0;\nconfig.onPanResponderGrant&&config.onPanResponderGrant(e,gestureState);\n// TODO: t7467124 investigate if this can be removed\nreturn config.onShouldBlockNativeResponder===undefined?true:\nconfig.onShouldBlockNativeResponder();\n},\n\nonResponderReject:function onResponderReject(e){\nconfig.onPanResponderReject&&config.onPanResponderReject(e,gestureState);\n},\n\nonResponderRelease:function onResponderRelease(e){\nconfig.onPanResponderRelease&&config.onPanResponderRelease(e,gestureState);\nPanResponder._initializeGestureState(gestureState);\n},\n\nonResponderStart:function onResponderStart(e){\nvar touchHistory=e.touchHistory;\ngestureState.numberActiveTouches=touchHistory.numberActiveTouches;\nconfig.onPanResponderStart&&config.onPanResponderStart(e,gestureState);\n},\n\nonResponderMove:function onResponderMove(e){\nvar touchHistory=e.touchHistory;\n// Guard against the dispatch of two touch moves when there are two\n// simultaneously changed touches.\nif(gestureState._accountsForMovesUpTo===touchHistory.mostRecentTimeStamp){\nreturn;\n}\n// Filter out any touch moves past the first one - we would have\n// already processed multi-touch geometry during the first event.\nPanResponder._updateGestureStateOnMove(gestureState,touchHistory);\nconfig.onPanResponderMove&&config.onPanResponderMove(e,gestureState);\n},\n\nonResponderEnd:function onResponderEnd(e){\nvar touchHistory=e.touchHistory;\ngestureState.numberActiveTouches=touchHistory.numberActiveTouches;\nconfig.onPanResponderEnd&&config.onPanResponderEnd(e,gestureState);\n},\n\nonResponderTerminate:function onResponderTerminate(e){\nconfig.onPanResponderTerminate&&\nconfig.onPanResponderTerminate(e,gestureState);\nPanResponder._initializeGestureState(gestureState);\n},\n\nonResponderTerminationRequest:function onResponderTerminationRequest(e){\nreturn config.onPanResponderTerminationRequest===undefined?true:\nconfig.onPanResponderTerminationRequest(e,gestureState);\n}};\n\nreturn{panHandlers:panHandlers};\n}};\n\n\nmodule.exports=PanResponder;"]},"metadata":{},"sourceType":"script"}