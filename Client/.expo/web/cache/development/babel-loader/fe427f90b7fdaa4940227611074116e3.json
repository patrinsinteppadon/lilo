{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/paola/Documents/Capstone/lilo/node_modules/react-native-web-webrtc/RTCView/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport resolveAssetSource from \"./resolveAssetSource\";\nimport RTCViewResizeMode from \"./RTCViewResizeMode\";\nimport { createDOMElement } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { Component, PropTypes } from 'react';\nvar STATUS_ERRORED = 'ERRORED';\nvar STATUS_LOADED = 'LOADED';\nvar STATUS_LOADING = 'LOADING';\nvar STATUS_PENDING = 'PENDING';\nvar STATUS_IDLE = 'IDLE';\nvar RTCViewSourcePropType = PropTypes.oneOfType([PropTypes.shape({\n  uri: PropTypes.string.isRequired\n}), PropTypes.string]);\n\nvar RTCView = function (_Component) {\n  _inherits(RTCView, _Component);\n\n  var _super = _createSuper(RTCView);\n\n  function RTCView(props, context) {\n    var _this;\n\n    _classCallCheck(this, RTCView);\n\n    _this = _super.call(this, props, context);\n\n    _this._onError = function (e) {\n      var onError = _this.props.onError;\n      var event = {\n        nativeEvent: e\n      };\n\n      _this._destroyRTCViewLoader();\n\n      _this._updateRTCViewState(STATUS_ERRORED);\n\n      _this._onLoadEnd();\n\n      if (onError) {\n        onError(event);\n      }\n    };\n\n    _this._onLoad = function (e) {\n      var onLoad = _this.props.onLoad;\n      var event = {\n        nativeEvent: e\n      };\n\n      _this._destroyRTCViewLoader();\n\n      _this._updateRTCViewState(STATUS_LOADED);\n\n      if (onLoad) {\n        onLoad(event);\n      }\n\n      _this._onLoadEnd();\n    };\n\n    var uri = resolveAssetSource(props.source);\n    _this._rtcVideoViewState = uri ? STATUS_PENDING : STATUS_IDLE;\n    _this.state = {\n      isLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(RTCView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._rtcVideoViewState === STATUS_PENDING) {\n        this._createRTCViewLoader();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this._rtcVideoViewState === STATUS_PENDING && !this.rtcVideoView) {\n        this._createRTCViewLoader();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var nextUri = resolveAssetSource(nextProps.source);\n\n      if (resolveAssetSource(this.props.source) !== nextUri) {\n        this._updateRTCViewState(nextUri ? STATUS_PENDING : STATUS_IDLE);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._destroyRTCViewLoader();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoaded = this.state.isLoaded;\n      var _this$props = this.props,\n          streamURL = _this$props.streamURL,\n          autoPlay = _this$props.autoPlay,\n          muted = _this$props.muted,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          accessible = _this$props.accessible,\n          children = _this$props.children,\n          defaultSource = _this$props.defaultSource,\n          onLayout = _this$props.onLayout,\n          source = _this$props.source,\n          testID = _this$props.testID;\n      var displayRTCView = resolveAssetSource(!isLoaded ? defaultSource : source);\n      var backgroundRTCView = displayRTCView ? \"url(\\\"\" + displayRTCView + \"\\\")\" : null;\n      var style = StyleSheet.flatten(this.props.style);\n      var resizeMode = this.props.resizeMode || style.resizeMode || RTCViewResizeMode.cover;\n      style = process.env.NODE_ENV !== 'production' ? _objectSpread({}, style) : style;\n      delete style.resizeMode;\n      var attributes = {\n        src: streamURL\n      };\n      if (muted != null && muted != undefined && muted) attributes.muted = 'muted';\n      if (autoPlay != null && autoPlay != undefined && autoPlay) attributes.autoPlay = 'autoPlay';\n      return React.createElement(View, {\n        accessibilityLabel: accessibilityLabel,\n        accessibilityRole: \"video\",\n        accessible: accessible,\n        onLayout: onLayout,\n        style: [styles.initial, style, backgroundRTCView && {\n          backgroundRTCView: backgroundRTCView\n        }, resizeModeStyles[resizeMode]],\n        testID: testID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, createDOMElement('video', attributes), children ? React.createElement(View, {\n        children: children,\n        pointerEvents: \"box-none\",\n        style: styles.children,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      }) : null);\n    }\n  }, {\n    key: \"_createRTCViewLoader\",\n    value: function _createRTCViewLoader() {\n      var uri = resolveAssetSource(this.props.source);\n\n      this._destroyRTCViewLoader();\n\n      this.rtcVideoView = new window.RTCView();\n      this.rtcVideoView.onerror = this._onError;\n      this.rtcVideoView.onload = this._onLoad;\n      this.rtcVideoView.src = uri;\n\n      this._onLoadStart();\n    }\n  }, {\n    key: \"_destroyRTCViewLoader\",\n    value: function _destroyRTCViewLoader() {\n      if (this.rtcVideoView) {\n        this.rtcVideoView.onerror = null;\n        this.rtcVideoView.onload = null;\n        this.rtcVideoView = null;\n      }\n    }\n  }, {\n    key: \"_onLoadEnd\",\n    value: function _onLoadEnd() {\n      var onLoadEnd = this.props.onLoadEnd;\n\n      if (onLoadEnd) {\n        onLoadEnd();\n      }\n    }\n  }, {\n    key: \"_onLoadStart\",\n    value: function _onLoadStart() {\n      var onLoadStart = this.props.onLoadStart;\n\n      this._updateRTCViewState(STATUS_LOADING);\n\n      if (onLoadStart) {\n        onLoadStart();\n      }\n    }\n  }, {\n    key: \"_updateRTCViewState\",\n    value: function _updateRTCViewState(status) {\n      this._rtcVideoViewState = status;\n      var isLoaded = this._rtcVideoViewState === STATUS_LOADED;\n\n      if (isLoaded !== this.state.isLoaded) {\n        this.setState({\n          isLoaded: isLoaded\n        });\n      }\n    }\n  }]);\n\n  return RTCView;\n}(Component);\n\nRTCView.displayName = 'RTCView';\nRTCView.propTypes = _objectSpread(_objectSpread({}, View.propTypes), {}, {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  streamURL: PropTypes.string,\n  muted: PropTypes.string,\n  autoPlay: PropTypes.string,\n  children: PropTypes.any,\n  defaultSource: RTCViewSourcePropType,\n  onError: PropTypes.func,\n  onLayout: PropTypes.func,\n  onLoad: PropTypes.func,\n  onLoadEnd: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  source: RTCViewSourcePropType\n});\nRTCView.defaultProps = {};\nRTCView.resizeMode = RTCViewResizeMode;\nvar styles = StyleSheet.create({\n  initial: {\n    alignSelf: 'flex-start',\n    backgroundColor: 'transparent',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover'\n  },\n  video: {\n    borderWidth: 0,\n    height: 'auto',\n    maxHeight: '100%',\n    maxWidth: '100%',\n    opacity: 0\n  },\n  children: {\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0\n  }\n});\nvar resizeModeStyles = StyleSheet.create({\n  center: {\n    backgroundSize: 'auto',\n    backgroundPosition: 'center'\n  },\n  contain: {\n    backgroundSize: 'contain'\n  },\n  cover: {\n    backgroundSize: 'cover'\n  },\n  none: {\n    backgroundSize: 'auto'\n  },\n  repeat: {\n    backgroundSize: 'auto',\n    backgroundRepeat: 'repeat'\n  },\n  stretch: {\n    backgroundSize: '100% 100%'\n  }\n});\nmodule.exports = RTCView;","map":{"version":3,"sources":["/Users/paola/Documents/Capstone/lilo/node_modules/react-native-web-webrtc/RTCView/index.js"],"names":["resolveAssetSource","RTCViewResizeMode","createDOMElement","React","Component","PropTypes","STATUS_ERRORED","STATUS_LOADED","STATUS_LOADING","STATUS_PENDING","STATUS_IDLE","RTCViewSourcePropType","oneOfType","shape","uri","string","isRequired","RTCView","props","context","_onError","e","onError","event","nativeEvent","_destroyRTCViewLoader","_updateRTCViewState","_onLoadEnd","_onLoad","onLoad","source","_rtcVideoViewState","state","isLoaded","_createRTCViewLoader","rtcVideoView","nextProps","nextUri","streamURL","autoPlay","muted","accessibilityLabel","accessible","children","defaultSource","onLayout","testID","displayRTCView","backgroundRTCView","style","StyleSheet","flatten","resizeMode","cover","process","env","NODE_ENV","attributes","src","undefined","styles","initial","resizeModeStyles","window","onerror","onload","_onLoadStart","onLoadEnd","onLoadStart","status","setState","displayName","propTypes","View","width","number","height","any","func","defaultProps","create","alignSelf","backgroundColor","backgroundPosition","backgroundRepeat","backgroundSize","video","borderWidth","maxHeight","maxWidth","opacity","bottom","left","position","right","top","center","contain","none","repeat","stretch","module","exports"],"mappings":"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","sourcesContent":["/* global window */\n\nimport resolveAssetSource from './resolveAssetSource';\nimport RTCViewResizeMode from './RTCViewResizeMode';\n\nimport {\n    createDOMElement,\n    StyleSheet,\n    View\n} from 'react-native-web'\n\nimport React, { Component, PropTypes } from 'react';\n\nconst STATUS_ERRORED = 'ERRORED';\nconst STATUS_LOADED = 'LOADED';\nconst STATUS_LOADING = 'LOADING';\nconst STATUS_PENDING = 'PENDING';\nconst STATUS_IDLE = 'IDLE';\n\nconst RTCViewSourcePropType = PropTypes.oneOfType([\n    PropTypes.shape({\n        uri: PropTypes.string.isRequired\n    }),\n    PropTypes.string\n]);\n\nclass RTCView extends Component {\n    static displayName = 'RTCView'\n\n    static propTypes = {\n        ...View.propTypes,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        streamURL: PropTypes.string,\n        muted: PropTypes.string,\n        autoPlay: PropTypes.string,\n        children: PropTypes.any,\n        defaultSource: RTCViewSourcePropType,\n        onError: PropTypes.func,\n        onLayout: PropTypes.func,\n        onLoad: PropTypes.func,\n        onLoadEnd: PropTypes.func,\n        onLoadStart: PropTypes.func,\n        source: RTCViewSourcePropType,\n    };\n\n    static defaultProps = {};\n\n    static resizeMode = RTCViewResizeMode;\n\n    constructor(props, context) {\n        super(props, context);\n        const uri = resolveAssetSource(props.source);\n        this._rtcVideoViewState = uri ? STATUS_PENDING : STATUS_IDLE;\n        this.state = { isLoaded: false };\n    }\n\n    componentDidMount() {\n        if (this._rtcVideoViewState === STATUS_PENDING) {\n            this._createRTCViewLoader();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this._rtcVideoViewState === STATUS_PENDING && !this.rtcVideoView) {\n            this._createRTCViewLoader();\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const nextUri = resolveAssetSource(nextProps.source);\n        if (resolveAssetSource(this.props.source) !== nextUri) {\n            this._updateRTCViewState(nextUri ? STATUS_PENDING : STATUS_IDLE);\n        }\n    }\n\n    componentWillUnmount() {\n        this._destroyRTCViewLoader();\n    }\n\n    render() {\n        const { isLoaded } = this.state;\n        const {\n            streamURL,\n            autoPlay,\n            muted,\n            accessibilityLabel,\n            accessible,\n            children,\n            defaultSource,\n            onLayout,\n            source,\n            testID\n        } = this.props;\n\n        const displayRTCView = resolveAssetSource(!isLoaded ? defaultSource : source);\n        const backgroundRTCView = displayRTCView ? `url(\"${displayRTCView}\")` : null;\n        let style = StyleSheet.flatten(this.props.style);\n\n        const resizeMode = this.props.resizeMode || style.resizeMode || RTCViewResizeMode.cover;\n        // remove 'resizeMode' style, as it is not supported by View (N.B. styles are frozen in dev)\n        style = process.env.NODE_ENV !== 'production' ? { ...style } : style;\n        delete style.resizeMode;\n\n        /**\n         * RTCView is a non-stretching View. The rtcVideoView is displayed as a background\n         * rtcVideoView to support `resizeMode`. The HTML rtcVideoView is hidden but used to\n         * provide the correct responsive rtcVideoView dimensions, and to support the\n         * rtcVideoView context menu. Child content is rendered into an element absolutely\n         * positioned over the rtcVideoView.\n         */\n        var attributes = {src: streamURL}\n        if (muted != null && muted != undefined && muted)\n            attributes.muted = 'muted'\n        if (autoPlay != null && autoPlay != undefined && autoPlay)\n            attributes.autoPlay = 'autoPlay'\n\n        return (\n            <View\n                accessibilityLabel={accessibilityLabel}\n                accessibilityRole='video'\n                accessible={accessible}\n                onLayout={onLayout}\n                style={[\n                    styles.initial,\n                    style,\n                    backgroundRTCView && { backgroundRTCView },\n                    resizeModeStyles[resizeMode]\n                ]}\n                testID={testID}\n            >\n                {createDOMElement('video', attributes)}\n                {children ? (\n                    <View children={children} pointerEvents='box-none' style={styles.children} />\n                ) : null}\n            </View>\n        );\n    }\n\n    _createRTCViewLoader() {\n        const uri = resolveAssetSource(this.props.source);\n\n        this._destroyRTCViewLoader();\n        this.rtcVideoView = new window.RTCView();\n        this.rtcVideoView.onerror = this._onError;\n        this.rtcVideoView.onload = this._onLoad;\n        this.rtcVideoView.src = uri;\n        this._onLoadStart();\n    }\n\n    _destroyRTCViewLoader() {\n        if (this.rtcVideoView) {\n            this.rtcVideoView.onerror = null;\n            this.rtcVideoView.onload = null;\n            this.rtcVideoView = null;\n        }\n    }\n\n    _onError = (e) => {\n        const { onError } = this.props;\n        const event = { nativeEvent: e };\n\n        this._destroyRTCViewLoader();\n        this._updateRTCViewState(STATUS_ERRORED);\n        this._onLoadEnd();\n        if (onError) { onError(event); }\n    };\n\n    _onLoad = (e) => {\n        const { onLoad } = this.props;\n        const event = { nativeEvent: e };\n\n        this._destroyRTCViewLoader();\n        this._updateRTCViewState(STATUS_LOADED);\n        if (onLoad) { onLoad(event); }\n        this._onLoadEnd();\n    };\n\n    _onLoadEnd() {\n        const { onLoadEnd } = this.props;\n        if (onLoadEnd) { onLoadEnd(); }\n    }\n\n    _onLoadStart() {\n        const { onLoadStart } = this.props;\n        this._updateRTCViewState(STATUS_LOADING);\n        if (onLoadStart) { onLoadStart(); }\n    }\n\n    _updateRTCViewState(status) {\n        this._rtcVideoViewState = status;\n        const isLoaded = this._rtcVideoViewState === STATUS_LOADED;\n        if (isLoaded !== this.state.isLoaded) {\n            this.setState({ isLoaded });\n        }\n    }\n}\n\nconst styles = StyleSheet.create({\n    initial: {\n        alignSelf: 'flex-start',\n        backgroundColor: 'transparent',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover'\n    },\n    video: {\n        borderWidth: 0,\n        height: 'auto',\n        maxHeight: '100%',\n        maxWidth: '100%',\n        opacity: 0\n    },\n    children: {\n        bottom: 0,\n        left: 0,\n        position: 'absolute',\n        right: 0,\n        top: 0\n    }\n});\n\nconst resizeModeStyles = StyleSheet.create({\n    center: {\n        backgroundSize: 'auto',\n        backgroundPosition: 'center'\n    },\n    contain: {\n        backgroundSize: 'contain'\n    },\n    cover: {\n        backgroundSize: 'cover'\n    },\n    none: {\n        backgroundSize: 'auto'\n    },\n    repeat: {\n        backgroundSize: 'auto',\n        backgroundRepeat: 'repeat'\n    },\n    stretch: {\n        backgroundSize: '100% 100%'\n    }\n});\n\nmodule.exports = RTCView;\n\n"]},"metadata":{},"sourceType":"module"}