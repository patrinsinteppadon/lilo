{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { RCTViewManager } from \"react-native-dom\";\nimport RCTVideo from \"./RCTVideo\";\nimport resizeModes from \"./resizeModes\";\n\nvar RCTVideoManager = function (_RCTViewManager) {\n  _inherits(RCTVideoManager, _RCTViewManager);\n\n  var _super = _createSuper(RCTVideoManager);\n\n  function RCTVideoManager() {\n    _classCallCheck(this, RCTVideoManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RCTVideoManager, [{\n    key: \"view\",\n    value: function view() {\n      return new RCTVideo(this.bridge);\n    }\n  }, {\n    key: \"describeProps\",\n    value: function describeProps() {\n      return _get(_getPrototypeOf(RCTVideoManager.prototype), \"describeProps\", this).call(this).addBooleanProp(\"controls\", this.setControls).addStringProp(\"id\", this.setId).addBooleanProp(\"muted\", this.setMuted).addBooleanProp(\"paused\", this.setPaused).addNumberProp(\"progressUpdateInterval\", this.setProgressUpdateInterval).addBooleanProp(\"rate\", this.setRate).addBooleanProp(\"repeat\", this.setRepeat).addNumberProp(\"resizeMode\", this.setResizeMode).addNumberProp(\"seek\", this.setSeek).addObjectProp(\"src\", this.setSource).addNumberProp(\"volume\", this.setVolume).addDirectEvent(\"onVideoEnd\").addDirectEvent(\"onVideoError\").addDirectEvent(\"onVideoLoad\").addDirectEvent(\"onVideoLoadStart\").addDirectEvent(\"onVideoProgress\");\n    }\n  }, {\n    key: \"dismissFullscreenPlayer\",\n    value: function dismissFullscreenPlayer() {}\n  }, {\n    key: \"presentFullscreenPlayer\",\n    value: function presentFullscreenPlayer() {}\n  }, {\n    key: \"setControls\",\n    value: function setControls(view, value) {\n      view.controls = value;\n    }\n  }, {\n    key: \"setId\",\n    value: function setId(view, value) {\n      view.id = value;\n    }\n  }, {\n    key: \"setMuted\",\n    value: function setMuted(view, value) {\n      view.muted = value;\n    }\n  }, {\n    key: \"setPaused\",\n    value: function setPaused(view, value) {\n      view.paused = value;\n    }\n  }, {\n    key: \"setRate\",\n    value: function setRate(view, value) {\n      view.rate = value;\n    }\n  }, {\n    key: \"setRepeat\",\n    value: function setRepeat(view, value) {\n      view.repeat = value;\n    }\n  }, {\n    key: \"setResizeMode\",\n    value: function setResizeMode(view, value) {\n      view.resizeMode = value;\n    }\n  }, {\n    key: \"setSeek\",\n    value: function setSeek(view, value) {\n      view.seek = value;\n    }\n  }, {\n    key: \"setSource\",\n    value: function setSource(view, value) {\n      view.source = value;\n    }\n  }, {\n    key: \"constantsToExport\",\n    value: function constantsToExport() {\n      return _objectSpread({}, resizeModes);\n    }\n  }]);\n\n  return RCTVideoManager;\n}(RCTViewManager);\n\nRCTVideoManager.moduleName = \"RCTVideoManager\";\nexport default RCTVideoManager;","map":{"version":3,"sources":["/Users/paola/Documents/Capstone/lilo/node_modules/react-native-video/dom/RCTVideoManager.js"],"names":["RCTViewManager","RCTVideo","resizeModes","RCTVideoManager","bridge","addBooleanProp","setControls","addStringProp","setId","setMuted","setPaused","addNumberProp","setProgressUpdateInterval","setRate","setRepeat","setResizeMode","setSeek","addObjectProp","setSource","setVolume","addDirectEvent","view","value","controls","id","muted","paused","rate","repeat","resizeMode","seek","source","moduleName"],"mappings":";;;;;;;;;;;;;;;;AAEA,SAASA,cAAT,QAA+B,kBAA/B;AAEA,OAAOC,QAAP;AACA,OAAOC,WAAP;;IAIMC,e;;;;;;;;;;;;;2BAGG;AACL,aAAO,IAAIF,QAAJ,CAAa,KAAKG,MAAlB,CAAP;AACD;;;oCAEe;AACd,aAAO,mFAEJC,cAFI,CAEW,UAFX,EAEuB,KAAKC,WAF5B,EAGJC,aAHI,CAGU,IAHV,EAGgB,KAAKC,KAHrB,EAIJH,cAJI,CAIW,OAJX,EAIoB,KAAKI,QAJzB,EAKJJ,cALI,CAKW,QALX,EAKqB,KAAKK,SAL1B,EAMJC,aANI,CAMU,wBANV,EAMoC,KAAKC,yBANzC,EAOJP,cAPI,CAOW,MAPX,EAOmB,KAAKQ,OAPxB,EAQJR,cARI,CAQW,QARX,EAQqB,KAAKS,SAR1B,EASJH,aATI,CASU,YATV,EASwB,KAAKI,aAT7B,EAUJJ,aAVI,CAUU,MAVV,EAUkB,KAAKK,OAVvB,EAWJC,aAXI,CAWU,KAXV,EAWiB,KAAKC,SAXtB,EAYJP,aAZI,CAYU,QAZV,EAYoB,KAAKQ,SAZzB,EAaJC,cAbI,CAaW,YAbX,EAcJA,cAdI,CAcW,cAdX,EAeJA,cAfI,CAeW,aAfX,EAgBJA,cAhBI,CAgBW,kBAhBX,EAiBJA,cAjBI,CAiBW,iBAjBX,CAAP;AAkBD;;;8CAEyB,CAEzB;;;8CAEyB,CAEzB;;;gCAEWC,I,EAAgBC,K,EAAgB;AAC1CD,MAAAA,IAAI,CAACE,QAAL,GAAgBD,KAAhB;AACD;;;0BAEKD,I,EAAgBC,K,EAAe;AACnCD,MAAAA,IAAI,CAACG,EAAL,GAAUF,KAAV;AACD;;;6BAEQD,I,EAAgBC,K,EAAgB;AACvCD,MAAAA,IAAI,CAACI,KAAL,GAAaH,KAAb;AACD;;;8BAESD,I,EAAgBC,K,EAAgB;AACxCD,MAAAA,IAAI,CAACK,MAAL,GAAcJ,KAAd;AACD;;;4BAEOD,I,EAAgBC,K,EAAe;AACrCD,MAAAA,IAAI,CAACM,IAAL,GAAYL,KAAZ;AACD;;;8BAESD,I,EAAgBC,K,EAAgB;AACxCD,MAAAA,IAAI,CAACO,MAAL,GAAcN,KAAd;AACD;;;kCAEaD,I,EAAgBC,K,EAAe;AAC3CD,MAAAA,IAAI,CAACQ,UAAL,GAAkBP,KAAlB;AACD;;;4BAEOD,I,EAAgBC,K,EAAe;AACrCD,MAAAA,IAAI,CAACS,IAAL,GAAYR,KAAZ;AACD;;;8BAESD,I,EAAgBC,K,EAAoB;AAC5CD,MAAAA,IAAI,CAACU,MAAL,GAAcT,KAAd;AACD;;;wCAEmB;AAClB,+BAAYpB,WAAZ;AACD;;;;EA1E2BF,c;;AAAxBG,e,CACG6B,U,GAAa,iB;AA4EtB,eAAe7B,eAAf","sourcesContent":["// @flow\n\nimport { RCTViewManager } from \"react-native-dom\";\n\nimport RCTVideo from \"./RCTVideo\";\nimport resizeModes from \"./resizeModes\";\n\nimport type { VideoSource } from \"./types\";\n\nclass RCTVideoManager extends RCTViewManager {\n  static moduleName = \"RCTVideoManager\";\n\n  view() {\n    return new RCTVideo(this.bridge);\n  }\n\n  describeProps() {\n    return super\n      .describeProps()\n      .addBooleanProp(\"controls\", this.setControls)\n      .addStringProp(\"id\", this.setId)\n      .addBooleanProp(\"muted\", this.setMuted)\n      .addBooleanProp(\"paused\", this.setPaused)\n      .addNumberProp(\"progressUpdateInterval\", this.setProgressUpdateInterval)\n      .addBooleanProp(\"rate\", this.setRate)\n      .addBooleanProp(\"repeat\", this.setRepeat)\n      .addNumberProp(\"resizeMode\", this.setResizeMode)\n      .addNumberProp(\"seek\", this.setSeek)\n      .addObjectProp(\"src\", this.setSource)\n      .addNumberProp(\"volume\", this.setVolume)\n      .addDirectEvent(\"onVideoEnd\")\n      .addDirectEvent(\"onVideoError\")\n      .addDirectEvent(\"onVideoLoad\")\n      .addDirectEvent(\"onVideoLoadStart\")\n      .addDirectEvent(\"onVideoProgress\");\n  }\n\n  dismissFullscreenPlayer() {\n    // not currently working\n  }\n\n  presentFullscreenPlayer() {\n    // not currently working\n  }\n\n  setControls(view: RCTVideo, value: boolean) {\n    view.controls = value;\n  }\n\n  setId(view: RCTVideo, value: string) {\n    view.id = value;\n  }\n\n  setMuted(view: RCTVideo, value: boolean) {\n    view.muted = value;\n  }\n\n  setPaused(view: RCTVideo, value: boolean) {\n    view.paused = value;\n  }\n\n  setRate(view: RCTVideo, value: number) {\n    view.rate = value;\n  }\n\n  setRepeat(view: RCTVideo, value: boolean) {\n    view.repeat = value;\n  }\n\n  setResizeMode(view: RCTVideo, value: number) {\n    view.resizeMode = value;\n  }\n\n  setSeek(view: RCTVideo, value: number) {\n    view.seek = value;\n  }\n\n  setSource(view: RCTVideo, value: VideoSource) {\n    view.source = value;\n  }\n\n  constantsToExport() {\n    return { ...resizeModes };\n  }\n}\n\nexport default RCTVideoManager;\n"]},"metadata":{},"sourceType":"module"}