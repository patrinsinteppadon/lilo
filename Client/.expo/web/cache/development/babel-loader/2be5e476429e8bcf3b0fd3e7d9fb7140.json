{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { RCTEvent, RCTView } from \"react-native-dom\";\nimport shaka from \"shaka-player\";\nimport resizeModes from \"./resizeModes\";\nimport RCTVideoEvent from \"./RCTVideoEvent\";\n\nvar RCTVideo = function (_RCTView) {\n  _inherits(RCTVideo, _RCTView);\n\n  var _super = _createSuper(RCTVideo);\n\n  function RCTVideo(bridge) {\n    var _this;\n\n    _classCallCheck(this, RCTVideo);\n\n    _this = _super.call(this, bridge);\n    _this.playPromise = Promise.resolve();\n    _this.onEnd = false;\n    _this.onLoad = false;\n    _this.onLoadStart = false;\n    _this.onProgress = false;\n    _this._paused = false;\n    _this._progressUpdateInterval = 250.0;\n    _this._savedVolume = 1.0;\n\n    _this.onEnd = function () {\n      _this.onProgress();\n\n      _this.sendEvent(\"topVideoEnd\", null);\n\n      _this.stopProgressTimer();\n    };\n\n    _this.onError = function (error) {\n      console.warn(\"topVideoError\", error);\n    };\n\n    _this.onLoad = function () {\n      var height = _this.videoElement.videoHeight;\n      var width = _this.videoElement.videoWidth;\n      var payload = {\n        currentPosition: _this.videoElement.currentTime,\n        duration: _this.videoElement.duration,\n        naturalSize: {\n          width: width,\n          height: height,\n          orientation: width >= height ? \"landscape\" : \"portrait\"\n        }\n      };\n\n      _this.sendEvent(\"topVideoLoad\", payload);\n    };\n\n    _this.onReadyForDisplay = function () {\n      _this.sendEvent(\"onReadyForDisplay\");\n    };\n\n    _this.onLoadStart = function () {\n      var src = _this.videoElement.currentSrc;\n      var payload = {\n        isNetwork: !src.match(/^https?:\\/\\/localhost/),\n        uri: _this.videoElement.currentSrc\n      };\n\n      _this.sendEvent(\"topVideoLoadStart\", payload);\n    };\n\n    _this.onPause = function () {\n      _this.stopProgressTimer();\n    };\n\n    _this.onPlay = function () {\n      _this.startProgressTimer();\n    };\n\n    _this.onProgress = function () {\n      var payload = {\n        currentTime: _this.videoElement.currentTime,\n        seekableDuration: _this.videoElement.duration\n      };\n\n      _this.sendEvent(\"topVideoProgress\", payload);\n    };\n\n    _this.onRejectedAutoplay = function () {\n      _this.sendEvent(\"topVideoRejectedAutoplay\", null);\n    };\n\n    _this.eventDispatcher = bridge.getModuleByName(\"EventDispatcher\");\n    shaka.polyfill.installAll();\n    _this.onEnd = _this.onEnd.bind(_assertThisInitialized(_this));\n    _this.onLoad = _this.onLoad.bind(_assertThisInitialized(_this));\n    _this.onLoadStart = _this.onLoadStart.bind(_assertThisInitialized(_this));\n    _this.onPlay = _this.onPlay.bind(_assertThisInitialized(_this));\n    _this.onProgress = _this.onProgress.bind(_assertThisInitialized(_this));\n    _this.videoElement = _this.initializeVideoElement();\n\n    _this.videoElement.addEventListener(\"ended\", _this.onEnd);\n\n    _this.videoElement.addEventListener(\"loadeddata\", _this.onLoad);\n\n    _this.videoElement.addEventListener(\"canplay\", _this.onReadyForDisplay);\n\n    _this.videoElement.addEventListener(\"loadstart\", _this.onLoadStart);\n\n    _this.videoElement.addEventListener(\"pause\", _this.onPause);\n\n    _this.videoElement.addEventListener(\"play\", _this.onPlay);\n\n    _this.player = new shaka.Player(_this.videoElement);\n    _this.muted = false;\n    _this.rate = 1.0;\n    _this.volume = 1.0;\n\n    _this.childContainer.appendChild(_this.videoElement);\n\n    return _this;\n  }\n\n  _createClass(RCTVideo, [{\n    key: \"detachFromView\",\n    value: function detachFromView(view) {\n      this.videoElement.removeEventListener(\"ended\", this.onEnd);\n      this.videoElement.removeEventListener(\"loadeddata\", this.onLoad);\n      this.videoElement.removeEventListener(\"canplay\", this.onReadyForDisplay);\n      this.videoElement.removeEventListener(\"loadstart\", this.onLoadStart);\n      this.videoElement.removeEventListener(\"pause\", this.onPause);\n      this.videoElement.removeEventListener(\"play\", this.onPlay);\n      this.stopProgressTimer();\n    }\n  }, {\n    key: \"initializeVideoElement\",\n    value: function initializeVideoElement() {\n      var elem = document.createElement(\"video\");\n\n      _extends(elem.style, {\n        display: \"block\",\n        position: \"absolute\",\n        top: \"0\",\n        left: \"0\",\n        width: \"100%\",\n        height: \"100%\"\n      });\n\n      return elem;\n    }\n  }, {\n    key: \"presentFullscreenPlayer\",\n    value: function presentFullscreenPlayer() {\n      this.videoElement.webkitRequestFullScreen();\n    }\n  }, {\n    key: \"requestPlay\",\n    value: function requestPlay() {\n      var _this2 = this;\n\n      var playPromise = this.videoElement.play();\n\n      if (playPromise) {\n        playPromise.then(function () {}).catch(function (e) {\n          _this2.onError({\n            code: e.name,\n            message: e.message\n          });\n        });\n      }\n    }\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(eventName, payload) {\n      var event = new RCTVideoEvent(eventName, this.reactTag, 0, payload);\n      this.eventDispatcher.sendEvent(event);\n    }\n  }, {\n    key: \"startProgressTimer\",\n    value: function startProgressTimer() {\n      if (!this.progressTimer && this._progressUpdateInterval) {\n        this.onProgress();\n        this.progressTimer = setInterval(this.onProgress, this._progressUpdateInterval);\n      }\n    }\n  }, {\n    key: \"stopProgressTimer\",\n    value: function stopProgressTimer() {\n      if (this.progressTimer) {\n        clearInterval(this.progressTimer);\n        this.progressTimer = null;\n      }\n    }\n  }, {\n    key: \"controls\",\n    set: function set(value) {\n      this.videoElement.controls = value;\n      this.videoElement.style.pointerEvents = value ? \"auto\" : \"\";\n    }\n  }, {\n    key: \"id\",\n    set: function set(value) {\n      this.videoElement.id = value;\n    }\n  }, {\n    key: \"muted\",\n    set: function set(value) {\n      this.videoElement.muted = true;\n    }\n  }, {\n    key: \"paused\",\n    set: function set(value) {\n      if (value) {\n        this.videoElement.pause();\n      } else {\n        this.requestPlay();\n      }\n\n      this._paused = value;\n    }\n  }, {\n    key: \"progressUpdateInterval\",\n    set: function set(value) {\n      this._progressUpdateInterval = value;\n      this.stopProgressTimer();\n\n      if (!this._paused) {\n        this.startProgressTimer();\n      }\n    }\n  }, {\n    key: \"rate\",\n    set: function set(value) {\n      this.videoElement.defaultPlaybackRate = value;\n      this.videoElement.playbackRate = value;\n    }\n  }, {\n    key: \"repeat\",\n    set: function set(value) {\n      this.videoElement.loop = value;\n    }\n  }, {\n    key: \"resizeMode\",\n    set: function set(value) {\n      switch (value) {\n        case resizeModes.ScaleNone:\n          {\n            this.videoElement.style.objectFit = \"none\";\n            break;\n          }\n\n        case resizeModes.ScaleToFill:\n          {\n            this.videoElement.style.objectFit = \"fill\";\n            break;\n          }\n\n        case resizeModes.ScaleAspectFit:\n          {\n            this.videoElement.style.objectFit = \"contain\";\n            break;\n          }\n\n        case resizeModes.ScaleAspectFill:\n          {\n            this.videoElement.style.objectFit = \"cover\";\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"seek\",\n    set: function set(value) {\n      this.videoElement.currentTime = value;\n    }\n  }, {\n    key: \"source\",\n    set: function set(value) {\n      var _this3 = this;\n\n      var uri = value.uri;\n\n      if (uri.startsWith(\"blob:\")) {\n        var blob = this.bridge.blobManager.resolveURL(uri);\n\n        if (blob.type === \"text/xml\") {\n          blob = new Blob([blob], {\n            type: \"video/mp4\"\n          });\n        }\n\n        uri = URL.createObjectURL(blob);\n      }\n\n      if (!shaka.Player.isBrowserSupported()) {\n        this.videoElement.setAttribute(\"src\", uri);\n\n        if (!this._paused) {\n          this.requestPlay();\n        }\n      } else {\n        this.player.load(uri).then(function () {\n          if (!_this3._paused) {\n            _this3.requestPlay();\n          }\n        }).catch(this.onError);\n      }\n    }\n  }, {\n    key: \"volume\",\n    set: function set(value) {\n      if (value === 0) {\n        this.muted = true;\n      } else {\n        this.videoElement.volume = value;\n        this.muted = false;\n      }\n    }\n  }]);\n\n  return RCTVideo;\n}(RCTView);\n\ncustomElements.define(\"rct-video\", RCTVideo);\nexport default RCTVideo;","map":{"version":3,"sources":["/Users/paola/Documents/Capstone/lilo/node_modules/react-native-video/dom/RCTVideo.js"],"names":["RCTEvent","RCTView","shaka","resizeModes","RCTVideoEvent","RCTVideo","bridge","playPromise","Promise","resolve","onEnd","onLoad","onLoadStart","onProgress","_paused","_progressUpdateInterval","_savedVolume","sendEvent","stopProgressTimer","onError","error","console","warn","height","videoElement","videoHeight","width","videoWidth","payload","currentPosition","currentTime","duration","naturalSize","orientation","onReadyForDisplay","src","currentSrc","isNetwork","match","uri","onPause","onPlay","startProgressTimer","seekableDuration","onRejectedAutoplay","eventDispatcher","getModuleByName","polyfill","installAll","bind","initializeVideoElement","addEventListener","player","Player","muted","rate","volume","childContainer","appendChild","view","removeEventListener","elem","document","createElement","style","display","position","top","left","webkitRequestFullScreen","play","then","catch","e","code","name","message","eventName","event","reactTag","progressTimer","setInterval","clearInterval","value","controls","pointerEvents","id","pause","requestPlay","defaultPlaybackRate","playbackRate","loop","ScaleNone","objectFit","ScaleToFill","ScaleAspectFit","ScaleAspectFill","startsWith","blob","blobManager","resolveURL","type","Blob","URL","createObjectURL","isBrowserSupported","setAttribute","load","customElements","define"],"mappings":"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","sourcesContent":["// @flow\n\nimport { RCTEvent, RCTView, type RCTBridge } from \"react-native-dom\";\nimport shaka from \"shaka-player\";\n\nimport resizeModes from \"./resizeModes\";\nimport type { VideoSource } from \"./types\";\nimport RCTVideoEvent from \"./RCTVideoEvent\";\n\nclass RCTVideo extends RCTView {\n  playPromise: Promise<void> = Promise.resolve();\n  progressTimer: number;\n  videoElement: HTMLVideoElement;\n\n  onEnd: boolean = false;\n  onLoad: boolean = false;\n  onLoadStart: boolean = false;\n  onProgress: boolean = false;\n\n  _paused: boolean = false;\n  _progressUpdateInterval: number = 250.0;\n  _savedVolume: number = 1.0;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    this.eventDispatcher = bridge.getModuleByName(\"EventDispatcher\");\n\n    shaka.polyfill.installAll();\n\n    this.onEnd = this.onEnd.bind(this);\n    this.onLoad = this.onLoad.bind(this);\n    this.onLoadStart = this.onLoadStart.bind(this);\n    this.onPlay = this.onPlay.bind(this);\n    this.onProgress = this.onProgress.bind(this);\n\n    this.videoElement = this.initializeVideoElement();\n    this.videoElement.addEventListener(\"ended\", this.onEnd);\n    this.videoElement.addEventListener(\"loadeddata\", this.onLoad);\n    this.videoElement.addEventListener(\"canplay\", this.onReadyForDisplay);\n    this.videoElement.addEventListener(\"loadstart\", this.onLoadStart);\n    this.videoElement.addEventListener(\"pause\", this.onPause);\n    this.videoElement.addEventListener(\"play\", this.onPlay);\n    this.player = new shaka.Player(this.videoElement);\n\n    this.muted = false;\n    this.rate = 1.0;\n    this.volume = 1.0;\n    this.childContainer.appendChild(this.videoElement);\n  }\n\n  detachFromView(view: UIView) {\n    this.videoElement.removeEventListener(\"ended\", this.onEnd);\n    this.videoElement.removeEventListener(\"loadeddata\", this.onLoad);\n    this.videoElement.removeEventListener(\"canplay\", this.onReadyForDisplay);\n    this.videoElement.removeEventListener(\"loadstart\", this.onLoadStart);\n    this.videoElement.removeEventListener(\"pause\", this.onPause);\n    this.videoElement.removeEventListener(\"play\", this.onPlay);\n\n    this.stopProgressTimer();\n  }\n\n  initializeVideoElement() {\n    const elem = document.createElement(\"video\");\n\n    Object.assign(elem.style, {\n      display: \"block\",\n      position: \"absolute\",\n      top: \"0\",\n      left: \"0\",\n      width: \"100%\",\n      height: \"100%\"\n    });\n\n    return elem;\n  }\n\n  presentFullscreenPlayer() {\n    this.videoElement.webkitRequestFullScreen();\n  }\n\n  set controls(value: boolean) {\n    this.videoElement.controls = value;\n    this.videoElement.style.pointerEvents = value ? \"auto\" : \"\";\n  }\n\n  set id(value: string) {\n    this.videoElement.id = value;\n  }\n\n  set muted(value: boolean) {\n    this.videoElement.muted = true;\n  }\n\n  set paused(value: boolean) {\n    if (value) {\n      this.videoElement.pause();\n    } else {\n      this.requestPlay();\n    }\n    this._paused = value;\n  }\n\n  set progressUpdateInterval(value: number) {\n    this._progressUpdateInterval = value;\n    this.stopProgressTimer();\n    if (!this._paused) {\n      this.startProgressTimer();\n    }\n  }\n\n  set rate(value: number) {\n    this.videoElement.defaultPlaybackRate = value; // playbackRate doesn't work on Chrome\n    this.videoElement.playbackRate = value;\n  }\n\n  set repeat(value: boolean) {\n    this.videoElement.loop = value;\n  }\n\n  set resizeMode(value: number) {\n    switch (value) {\n      case resizeModes.ScaleNone: {\n        this.videoElement.style.objectFit = \"none\";\n        break;\n      }\n      case resizeModes.ScaleToFill: {\n        this.videoElement.style.objectFit = \"fill\";\n        break;\n      }\n      case resizeModes.ScaleAspectFit: {\n        this.videoElement.style.objectFit = \"contain\";\n        break;\n      }\n      case resizeModes.ScaleAspectFill: {\n        this.videoElement.style.objectFit = \"cover\";\n        break;\n      }\n    }\n  }\n\n  set seek(value: number) {\n    this.videoElement.currentTime = value;\n  }\n\n  set source(value: VideoSource) {\n    let uri = value.uri;\n\n    if (uri.startsWith(\"blob:\")) {\n      let blob = this.bridge.blobManager.resolveURL(uri);\n      if (blob.type === \"text/xml\") {\n        blob = new Blob([blob], { type: \"video/mp4\" });\n      }\n      uri = URL.createObjectURL(blob);\n    }\n\n    if (!shaka.Player.isBrowserSupported()) { // primarily iOS WebKit\n      this.videoElement.setAttribute(\"src\", uri);\n      if (!this._paused) {\n        this.requestPlay();\n      }\n    } else {\n      this.player.load(uri)\n        .then(() => {\n          if (!this._paused) {\n            this.requestPlay();\n          }\n        })\n        .catch(this.onError);\n    }\n  }\n\n  set volume(value: number) {\n    if (value === 0) {\n      this.muted = true;\n    } else {\n      this.videoElement.volume = value;\n      this.muted = false;\n    }\n  }\n\n  onEnd = () => {\n    this.onProgress();\n    this.sendEvent(\"topVideoEnd\", null);\n    this.stopProgressTimer();    \n  }\n\n  onError = error => {\n    console.warn(\"topVideoError\", error);\n  }\n\n  onLoad = () => {\n    // height & width are safe with audio, will be 0\n    const height = this.videoElement.videoHeight;\n    const width = this.videoElement.videoWidth;\n    const payload = {\n      currentPosition: this.videoElement.currentTime,\n      duration: this.videoElement.duration,\n      naturalSize: {\n        width,\n        height,\n        orientation: width >= height ? \"landscape\" : \"portrait\"\n      }\n    };\n    this.sendEvent(\"topVideoLoad\", payload);\n  }\n\n  onReadyForDisplay = () => {\n    this.sendEvent(\"onReadyForDisplay\");\n  }\n\n  onLoadStart = () => {\n    const src = this.videoElement.currentSrc;\n    const payload = {\n      isNetwork: !src.match(/^https?:\\/\\/localhost/), // require is served from localhost\n      uri: this.videoElement.currentSrc\n    };\n    this.sendEvent(\"topVideoLoadStart\", payload);\n  }\n\n  onPause = () => {\n    this.stopProgressTimer();\n  }\n\n  onPlay = () => {\n    this.startProgressTimer();\n  }\n\n  onProgress = () => {\n    const payload = {\n      currentTime: this.videoElement.currentTime,\n      seekableDuration: this.videoElement.duration\n    };\n    this.sendEvent(\"topVideoProgress\", payload);\n  }\n\n  onRejectedAutoplay = () => {\n    this.sendEvent(\"topVideoRejectedAutoplay\", null);\n  }\n\n  requestPlay() {\n    const playPromise = this.videoElement.play();\n    if (playPromise) {\n      playPromise\n        .then(() => {})\n        .catch(e => {\n          /* This is likely one of:\n           * name: NotAllowedError - autoplay is not supported\n           * name: NotSupportedError - format is not supported\n           */\n          this.onError({ code: e.name, message: e.message });\n        });\n    }\n  }\n\n  sendEvent(eventName, payload) {\n    const event = new RCTVideoEvent(eventName, this.reactTag, 0, payload);\n    this.eventDispatcher.sendEvent(event);\n  }\n\n  startProgressTimer() {\n    if (!this.progressTimer && this._progressUpdateInterval) {\n      this.onProgress();\n      this.progressTimer = setInterval(this.onProgress, this._progressUpdateInterval);\n    }\n  }\n\n  stopProgressTimer() {\n    if (this.progressTimer) {\n      clearInterval(this.progressTimer);\n      this.progressTimer = null;\n    }\n  }\n}\n\ncustomElements.define(\"rct-video\", RCTVideo);\n\nexport default RCTVideo;\n"]},"metadata":{},"sourceType":"module"}