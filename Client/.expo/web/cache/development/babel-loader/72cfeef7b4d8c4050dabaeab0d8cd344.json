{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport EventTarget from 'event-target-shim';\nimport _getDisplayMedia from \"./getDisplayMedia\";\nimport _getUserMedia from \"./getUserMedia\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar MEDIA_DEVICES_EVENTS = ['devicechange'];\n\nvar MediaDevices = function (_EventTarget) {\n  _inherits(MediaDevices, _EventTarget);\n\n  var _super = _createSuper(MediaDevices);\n\n  function MediaDevices() {\n    _classCallCheck(this, MediaDevices);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MediaDevices, [{\n    key: \"enumerateDevices\",\n    value: function enumerateDevices() {\n      return new Promise(function (resolve) {\n        return WebRTCModule.enumerateDevices(resolve);\n      });\n    }\n  }, {\n    key: \"getDisplayMedia\",\n    value: function getDisplayMedia(constraints) {\n      return _getDisplayMedia(constraints);\n    }\n  }, {\n    key: \"getUserMedia\",\n    value: function getUserMedia(constraints) {\n      return _getUserMedia(constraints);\n    }\n  }]);\n\n  return MediaDevices;\n}(EventTarget(MEDIA_DEVICES_EVENTS));\n\nexport default new MediaDevices();","map":{"version":3,"sources":["/Users/paola/Documents/Capstone/lilo/node_modules/react-native-webrtc/MediaDevices.js"],"names":["EventTarget","getDisplayMedia","getUserMedia","WebRTCModule","NativeModules","MEDIA_DEVICES_EVENTS","MediaDevices","Promise","resolve","enumerateDevices","constraints"],"mappings":"AAAA;;;;;;;;;;;;;AAGA,OAAOA,WAAP,MAAwB,mBAAxB;AAEA,OAAOC,gBAAP;AACA,OAAOC,aAAP;IAEOC,Y,GAAgBC,a,CAAhBD,Y;AAEP,IAAME,oBAAoB,GAAG,CACzB,cADyB,CAA7B;;IAIMC,Y;;;;;;;;;;;;;uCAQiB;AACf,aAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,eAAIL,YAAY,CAACM,gBAAb,CAA8BD,OAA9B,CAAJ;AAAA,OAAnB,CAAP;AACH;;;oCASeE,W,EAAa;AACzB,aAAOT,gBAAe,CAACS,WAAD,CAAtB;AACH;;;iCAUYA,W,EAAa;AACtB,aAAOR,aAAY,CAACQ,WAAD,CAAnB;AACH;;;;EAjCsBV,WAAW,CAACK,oBAAD,C;;AAoCtC,eAAe,IAAIC,YAAJ,EAAf","sourcesContent":["'use strict';\n\nimport {NativeModules} from 'react-native';\nimport EventTarget from 'event-target-shim';\n\nimport getDisplayMedia from './getDisplayMedia';\nimport getUserMedia from './getUserMedia';\n\nconst {WebRTCModule} = NativeModules;\n\nconst MEDIA_DEVICES_EVENTS = [\n    'devicechange'\n];\n\nclass MediaDevices extends EventTarget(MEDIA_DEVICES_EVENTS) {\n    // TODO: implement.\n    ondevicechange: ?Function;\n\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code enumerateDevices}\n     * implementation.\n     */\n    enumerateDevices() {\n        return new Promise(resolve => WebRTCModule.enumerateDevices(resolve));\n    }\n\n    /**\n     * W3C \"Screen Capture\" compatible {@code getDisplayMedia} implementation.\n     * See: https://w3c.github.io/mediacapture-screen-share/\n     *\n     * @param {*} constraints\n     * @returns {Promise}\n     */\n    getDisplayMedia(constraints) {\n        return getDisplayMedia(constraints);\n    }\n\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code getUserMedia}\n     * implementation.\n     * See: https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-enumeratedevices\n     *\n     * @param {*} constraints \n     * @returns {Promise}\n     */\n    getUserMedia(constraints) {\n        return getUserMedia(constraints);\n    }\n}\n\nexport default new MediaDevices();\n"]},"metadata":{},"sourceType":"module"}