{"ast":null,"code":"'use strict';\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport MediaStream from \"./MediaStream\";\nimport MediaStreamError from \"./MediaStreamError\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nexport default function getDisplayMedia(constraints) {\n  if (Platform.OS !== 'android') {\n    return Promise.reject(new Error('Unsupported platform'));\n  }\n\n  if (!constraints || !constraints.video) {\n    return Promise.reject(new TypeError());\n  }\n\n  return new Promise(function (resolve, reject) {\n    WebRTCModule.getDisplayMedia().then(function (data) {\n      var streamId = data.streamId,\n          track = data.track;\n      var info = {\n        streamId: streamId,\n        streamReactTag: streamId,\n        tracks: [track]\n      };\n      var stream = new MediaStream(info);\n      resolve(stream);\n    }, function (error) {\n      reject(new MediaStreamError(error));\n    });\n  });\n}","map":{"version":3,"sources":["/Users/paola/Documents/Capstone/lilo/node_modules/react-native-webrtc/getDisplayMedia.js"],"names":["MediaStream","MediaStreamError","WebRTCModule","NativeModules","getDisplayMedia","constraints","Platform","OS","Promise","reject","Error","video","TypeError","resolve","then","data","streamId","track","info","streamReactTag","tracks","stream","error"],"mappings":"AAAA;;;;AAIA,OAAOA,WAAP;AACA,OAAOC,gBAAP;IAEQC,Y,GAAiBC,a,CAAjBD,Y;AAER,eAAe,SAASE,eAAT,CAAyBC,WAAzB,EAAsC;AACjD,MAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC3B,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,sBAAV,CAAf,CAAP;AACH;;AAED,MAAI,CAACL,WAAD,IAAgB,CAACA,WAAW,CAACM,KAAjC,EAAwC;AACpC,WAAOH,OAAO,CAACC,MAAR,CAAe,IAAIG,SAAJ,EAAf,CAAP;AACH;;AAED,SAAO,IAAIJ,OAAJ,CAAY,UAACK,OAAD,EAAUJ,MAAV,EAAqB;AACpCP,IAAAA,YAAY,CAACE,eAAb,GACKU,IADL,CACU,UAAAC,IAAI,EAAI;AAAA,UACFC,QADE,GACkBD,IADlB,CACFC,QADE;AAAA,UACQC,KADR,GACkBF,IADlB,CACQE,KADR;AAGV,UAAMC,IAAI,GAAG;AACTF,QAAAA,QAAQ,EAAEA,QADD;AAETG,QAAAA,cAAc,EAAEH,QAFP;AAGTI,QAAAA,MAAM,EAAE,CAACH,KAAD;AAHC,OAAb;AAMA,UAAMI,MAAM,GAAG,IAAIrB,WAAJ,CAAgBkB,IAAhB,CAAf;AAEAL,MAAAA,OAAO,CAACQ,MAAD,CAAP;AACH,KAbL,EAaO,UAAAC,KAAK,EAAI;AACRb,MAAAA,MAAM,CAAC,IAAIR,gBAAJ,CAAqBqB,KAArB,CAAD,CAAN;AACH,KAfL;AAgBH,GAjBM,CAAP;AAkBH","sourcesContent":["'use strict';\n\nimport { Platform, NativeModules } from 'react-native';\n\nimport MediaStream from './MediaStream';\nimport MediaStreamError from './MediaStreamError';\n\nconst { WebRTCModule } = NativeModules;\n\nexport default function getDisplayMedia(constraints) {\n    if (Platform.OS !== 'android') {\n        return Promise.reject(new Error('Unsupported platform'));\n    }\n\n    if (!constraints || !constraints.video) {\n        return Promise.reject(new TypeError());\n    }\n\n    return new Promise((resolve, reject) => {\n        WebRTCModule.getDisplayMedia()\n            .then(data => {\n                const { streamId, track } = data;\n\n                const info = {\n                    streamId: streamId,\n                    streamReactTag: streamId,\n                    tracks: [track]\n                };\n\n                const stream = new MediaStream(info);\n\n                resolve(stream);\n            }, error => {\n                reject(new MediaStreamError(error));\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}