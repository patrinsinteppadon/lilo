{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport EventTarget from 'event-target-shim';\nimport MediaStreamErrorEvent from \"./MediaStreamErrorEvent\";\nimport { deepClone } from \"./RTCUtil\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar MEDIA_STREAM_TRACK_EVENTS = ['ended', 'mute', 'unmute', 'overconstrained'];\n\nvar MediaStreamTrack = function (_EventTarget) {\n  _inherits(MediaStreamTrack, _EventTarget);\n\n  var _super = _createSuper(MediaStreamTrack);\n\n  function MediaStreamTrack(info) {\n    var _this;\n\n    _classCallCheck(this, MediaStreamTrack);\n\n    _this = _super.call(this);\n    _this._constraints = info.constraints || {};\n    _this._enabled = info.enabled;\n    _this.id = info.id;\n    _this.kind = info.kind;\n    _this.label = info.label;\n    _this.muted = false;\n    _this.remote = info.remote;\n\n    var _readyState = info.readyState.toLowerCase();\n\n    _this.readyState = _readyState === \"initializing\" || _readyState === \"live\" ? \"live\" : \"ended\";\n    return _this;\n  }\n\n  _createClass(MediaStreamTrack, [{\n    key: \"stop\",\n    value: function stop() {\n      WebRTCModule.mediaStreamTrackSetEnabled(this.id, false);\n      this.readyState = 'ended';\n    }\n  }, {\n    key: \"_switchCamera\",\n    value: function _switchCamera() {\n      if (this.remote) {\n        throw new Error('Not implemented for remote tracks');\n      }\n\n      if (this.kind !== 'video') {\n        throw new Error('Only implemented for video tracks');\n      }\n\n      WebRTCModule.mediaStreamTrackSwitchCamera(this.id);\n    }\n  }, {\n    key: \"applyConstraints\",\n    value: function applyConstraints() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"getCapabilities\",\n    value: function getCapabilities() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"getConstraints\",\n    value: function getConstraints() {\n      return deepClone(this._constraints);\n    }\n  }, {\n    key: \"getSettings\",\n    value: function getSettings() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      WebRTCModule.mediaStreamTrackRelease(this.id);\n    }\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(enabled) {\n      if (enabled === this._enabled) {\n        return;\n      }\n\n      WebRTCModule.mediaStreamTrackSetEnabled(this.id, !this._enabled);\n      this._enabled = !this._enabled;\n      this.muted = !this._enabled;\n    }\n  }]);\n\n  return MediaStreamTrack;\n}(EventTarget(MEDIA_STREAM_TRACK_EVENTS));\n\nexport default MediaStreamTrack;","map":{"version":3,"sources":["/Users/paola/Documents/Capstone/lilo/node_modules/react-native-webrtc/MediaStreamTrack.js"],"names":["EventTarget","MediaStreamErrorEvent","deepClone","WebRTCModule","NativeModules","MEDIA_STREAM_TRACK_EVENTS","MediaStreamTrack","info","_constraints","constraints","_enabled","enabled","id","kind","label","muted","remote","_readyState","readyState","toLowerCase","mediaStreamTrackSetEnabled","Error","mediaStreamTrackSwitchCamera","mediaStreamTrackRelease"],"mappings":"AAAA;;;;;;;;;;;;;AAGA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,qBAAP;AAEA,SAASC,SAAT;IAEOC,Y,GAAgBC,a,CAAhBD,Y;AAEP,IAAME,yBAAyB,GAAG,CAChC,OADgC,EAEhC,MAFgC,EAGhC,QAHgC,EAKhC,iBALgC,CAAlC;;IAUMC,gB;;;;;AAgBJ,4BAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB;AAEA,UAAKC,YAAL,GAAoBD,IAAI,CAACE,WAAL,IAAoB,EAAxC;AACA,UAAKC,QAAL,GAAgBH,IAAI,CAACI,OAArB;AACA,UAAKC,EAAL,GAAUL,IAAI,CAACK,EAAf;AACA,UAAKC,IAAL,GAAYN,IAAI,CAACM,IAAjB;AACA,UAAKC,KAAL,GAAaP,IAAI,CAACO,KAAlB;AACA,UAAKC,KAAL,GAAa,KAAb;AACA,UAAKC,MAAL,GAAcT,IAAI,CAACS,MAAnB;;AAEA,QAAMC,WAAW,GAAGV,IAAI,CAACW,UAAL,CAAgBC,WAAhB,EAApB;;AACA,UAAKD,UAAL,GAAmBD,WAAW,KAAK,cAAhB,IACAA,WAAW,KAAK,MADjB,GAC2B,MAD3B,GACoC,OADtD;AAZgB;AAcjB;;;;2BAeM;AACLd,MAAAA,YAAY,CAACiB,0BAAb,CAAwC,KAAKR,EAA7C,EAAiD,KAAjD;AACA,WAAKM,UAAL,GAAkB,OAAlB;AAED;;;oCASe;AACd,UAAI,KAAKF,MAAT,EAAiB;AACf,cAAM,IAAIK,KAAJ,CAAU,mCAAV,CAAN;AACD;;AACD,UAAI,KAAKR,IAAL,KAAc,OAAlB,EAA2B;AACzB,cAAM,IAAIQ,KAAJ,CAAU,mCAAV,CAAN;AACD;;AACDlB,MAAAA,YAAY,CAACmB,4BAAb,CAA0C,KAAKV,EAA/C;AACD;;;uCAEkB;AACjB,YAAM,IAAIS,KAAJ,CAAU,kBAAV,CAAN;AACD;;;4BAEO;AACN,YAAM,IAAIA,KAAJ,CAAU,kBAAV,CAAN;AACD;;;sCAEiB;AAChB,YAAM,IAAIA,KAAJ,CAAU,kBAAV,CAAN;AACD;;;qCAEgB;AACf,aAAOnB,SAAS,CAAC,KAAKM,YAAN,CAAhB;AACD;;;kCAEa;AACZ,YAAM,IAAIa,KAAJ,CAAU,kBAAV,CAAN;AACD;;;8BAES;AACRlB,MAAAA,YAAY,CAACoB,uBAAb,CAAqC,KAAKX,EAA1C;AACD;;;wBA1DsB;AACrB,aAAO,KAAKF,QAAZ;AACD,K;sBAEWC,O,EAAwB;AAClC,UAAIA,OAAO,KAAK,KAAKD,QAArB,EAA+B;AAC7B;AACD;;AACDP,MAAAA,YAAY,CAACiB,0BAAb,CAAwC,KAAKR,EAA7C,EAAiD,CAAC,KAAKF,QAAvD;AACA,WAAKA,QAAL,GAAgB,CAAC,KAAKA,QAAtB;AACA,WAAKK,KAAL,GAAa,CAAC,KAAKL,QAAnB;AACD;;;;EA3C4BV,WAAW,CAACK,yBAAD,C;;AA6F1C,eAAeC,gBAAf","sourcesContent":["'use strict';\n\nimport {NativeModules} from 'react-native';\nimport EventTarget from 'event-target-shim';\nimport MediaStreamErrorEvent from './MediaStreamErrorEvent';\nimport type MediaStreamError from './MediaStreamError';\nimport { deepClone } from './RTCUtil';\n\nconst {WebRTCModule} = NativeModules;\n\nconst MEDIA_STREAM_TRACK_EVENTS = [\n  'ended',\n  'mute',\n  'unmute',\n  // see: https://www.w3.org/TR/mediacapture-streams/#constrainable-interface\n  'overconstrained',\n];\n\ntype MediaStreamTrackState = \"live\" | \"ended\";\n\nclass MediaStreamTrack extends EventTarget(MEDIA_STREAM_TRACK_EVENTS) {\n  _constraints: Object;\n  _enabled: boolean;\n  id: string;\n  kind: string;\n  label: string;\n  muted: boolean;\n  // readyState in java: INITIALIZING, LIVE, ENDED, FAILED\n  readyState: MediaStreamTrackState;\n  remote: boolean;\n\n  onended: ?Function;\n  onmute: ?Function;\n  onunmute: ?Function;\n  overconstrained: ?Function;\n\n  constructor(info) {\n    super();\n\n    this._constraints = info.constraints || {};\n    this._enabled = info.enabled;\n    this.id = info.id;\n    this.kind = info.kind;\n    this.label = info.label;\n    this.muted = false;\n    this.remote = info.remote;\n\n    const _readyState = info.readyState.toLowerCase();\n    this.readyState = (_readyState === \"initializing\"\n                    || _readyState === \"live\") ? \"live\" : \"ended\";\n  }\n\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(enabled: boolean): void {\n    if (enabled === this._enabled) {\n      return;\n    }\n    WebRTCModule.mediaStreamTrackSetEnabled(this.id, !this._enabled);\n    this._enabled = !this._enabled;\n    this.muted = !this._enabled;\n  }\n\n  stop() {\n    WebRTCModule.mediaStreamTrackSetEnabled(this.id, false);\n    this.readyState = 'ended';\n    // TODO: save some stopped flag?\n  }\n\n  /**\n   * Private / custom API for switching the cameras on the fly, without the\n   * need for adding / removing tracks or doing any SDP renegotiation.\n   *\n   * This is how the reference application (AppRTCMobile) implements camera\n   * switching.\n   */\n  _switchCamera() {\n    if (this.remote) {\n      throw new Error('Not implemented for remote tracks');\n    }\n    if (this.kind !== 'video') {\n      throw new Error('Only implemented for video tracks');\n    }\n    WebRTCModule.mediaStreamTrackSwitchCamera(this.id);\n  }\n\n  applyConstraints() {\n    throw new Error('Not implemented.');\n  }\n\n  clone() {\n    throw new Error('Not implemented.');\n  }\n\n  getCapabilities() {\n    throw new Error('Not implemented.');\n  }\n\n  getConstraints() {\n    return deepClone(this._constraints);\n  }\n\n  getSettings() {\n    throw new Error('Not implemented.');\n  }\n\n  release() {\n    WebRTCModule.mediaStreamTrackRelease(this.id);\n  }\n}\n\nexport default MediaStreamTrack;\n"]},"metadata":{},"sourceType":"module"}